name: CI Pipeline

# ðŸ‘‡ 1) permisos para OIDC
permissions:
  contents: read        # checkout del repo
  id-token: write       # para azure/login via OIDC

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # ------------------------------------------------------------
  # 1) Test rÃ¡pidos en Docker (unit tests / no tocan Azure)
  # ------------------------------------------------------------
  test:
    runs-on: ubuntu-latest
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          ACCEPT_EULA: "Y"
          SA_PASSWORD: "DockerSql!2025"
          MSSQL_PID: "Developer"
        ports:
          - 1433:1433

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install ODBC driver dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y unixodbc unixodbc-dev libodbc2 curl gnupg
          curl -fsSL https://packages.microsoft.com/keys/microsoft.asc \
            | gpg --dearmor \
            | sudo tee /usr/share/keyrings/microsoft.gpg > /dev/null
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft.gpg] https://packages.microsoft.com/ubuntu/22.04/prod jammy main" \
            | sudo tee /etc/apt/sources.list.d/mssql-release.list
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for SQL Server to be ready
        run: |
          echo "Esperando a que SQL Server arranque..."
          for i in {1..30}; do
            /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'DockerSql!2025' -Q "SELECT 1" \
              && { echo "Â¡SQL Server listo!"; break; }
            echo "Intento $i fallido, reintentando en 2s..."
            sleep 2
          done

      - name: Run pytest against local Docker
        env:
          SERVER: "127.0.0.1,1433"
          DATABASE: "master"
          USER: "SA"
          PWD: "DockerSql!2025"
        run: pytest -q

  # ------------------------------------------------------------
  # 2) Integration tests contra tu Azure SQL real (via OIDC)
  # ------------------------------------------------------------
  integration:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Azure via OIDC
        uses: azure/login@v1
        with:
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          tenant-id:       ${{ secrets.AZURE_TENANT_ID }}
        # no client-secret: usarÃ¡ el id-token OIDC federado

      - name: Get public IP of runner
        id: get_ip
        run: |
          echo "RUNNER_IP=$(curl -s ifconfig.me)" >> $GITHUB_ENV

      - name: Open firewall for this runner
        run: |
          az sql server firewall-rule create \
            --resource-group ${{ secrets.AZURE_SQL_RESOURCE_GROUP }} \
            --server          ${{ secrets.AZURE_SQL_SERVER_NAME }} \
            --name            GitHubRunner \
            --start-ip-address ${{ env.RUNNER_IP }} \
            --end-ip-address   ${{ env.RUNNER_IP }}

      - name: Install ODBC driver & Python deps
        run: |
          sudo apt-get update
          sudo apt-get install -y unixodbc unixodbc-dev libodbc2 curl gnupg
          curl -fsSL https://packages.microsoft.com/keys/microsoft.asc \
            | gpg --dearmor \
            | sudo tee /usr/share/keyrings/microsoft.gpg > /dev/null
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft.gpg] https://packages.microsoft.com/ubuntu/22.04/prod jammy main" \
            | sudo tee /etc/apt/sources.list.d/mssql-release.list
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run integration tests against Azure SQL
        env:
          SERVER: ${{ secrets.AZURE_SQL_SERVER_NAME }}.database.windows.net
          DATABASE: ${{ secrets.AZURE_SQL_DATABASE }}
          USER: ${{ secrets.AZURE_SQL_USER }}
          PWD: ${{ secrets.AZURE_SQL_PASSWORD }}
        run: pytest tests/integration -q

      - name: Close firewall for this runner
        if: always()
        run: |
          az sql server firewall-rule delete \
            --resource-group ${{ secrets.AZURE_SQL_RESOURCE_GROUP }} \
            --server          ${{ secrets.AZURE_SQL_SERVER_NAME }} \
            --name            GitHubRunner
