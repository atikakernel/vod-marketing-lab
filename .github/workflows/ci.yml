name: CI Pipeline

permissions:
  contents: read
  id-token: write

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test: # Este job prueba contra Docker
    runs-on: ubuntu-latest
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          ACCEPT_EULA: "Y"
          SA_PASSWORD: "DockerSql!2025"
          MSSQL_PID: "Developer"
        ports:
          - 1433:1433

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install ODBC driver and mssql-tools dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y unixodbc unixodbc-dev libodbc2 curl gnupg
          curl -fsSL https://packages.microsoft.com/keys/microsoft.asc \
            | gpg --dearmor \
            | sudo tee /usr/share/keyrings/microsoft.gpg > /dev/null
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft.gpg] \
            https://packages.microsoft.com/ubuntu/22.04/prod jammy main" \
            | sudo tee /etc/apt/sources.list.d/mssql-release.list
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18 mssql-tools
          echo "/opt/mssql-tools/bin" >> $GITHUB_PATH

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for SQL Server to be ready
        run: |
          echo "Esperando a que SQL Server arranque..."
          for i in {1..30}; do
            sqlcmd -S localhost -U SA -P 'DockerSql!2025' -Q "SELECT 1" \
              && { echo "Â¡SQL Server listo!"; break; }
            echo "Intento $i fallido, reintentando en 2s..."
            sleep 2
          done
          sqlcmd -S localhost -U SA -P 'DockerSql!2025' -Q "SELECT 1" || exit 1

      - name: Run unit tests against local Docker
        env:
          SERVER: "127.0.0.1,1433"
          DATABASE: "master"
          USER: "SA"
          SQL_PASSWORD: "DockerSql!2025"
        run: pytest tests/test_db_utils.py -q # Ejecuta solo los tests unitarios

  integration: # Este job prueba contra Azure SQL
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Login to Azure
        uses: azure/login@v2
        with:
          auth-type: 'SERVICE_PRINCIPAL'
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Get public IP of runner
        id: get_ip
        run: |
          echo "RUNNER_IP=$(curl -s ifconfig.me)" >> $GITHUB_ENV

      - name: Open firewall for this runner
        run: |
          az sql server firewall-rule create \
            --resource-group ${{ secrets.AZURE_SQL_RESOURCE_GROUP }} \
            --server          ${{ secrets.AZURE_SQL_SERVER_NAME }} \
            --name            GitHubRunner \
            --start-ip-address ${{ env.RUNNER_IP }} \
            --end-ip-address   ${{ env.RUNNER_IP }}

      - name: Wait for firewall rule to propagate
        run: |
          echo "Esperando 15 segundos para que la regla de firewall se propague..."
          sleep 15

      - name: Install ODBC driver & Python deps
        run: |
          sudo apt-get update
          sudo apt-get install -y unixodbc unixodbc-dev libodbc2 curl gnupg
          curl -fsSL https://packages.microsoft.com/keys/microsoft.asc \
            | gpg --dearmor \
            | sudo tee /usr/share/keyrings/microsoft.gpg > /dev/null
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft.gpg] \
            https://packages.microsoft.com/ubuntu/22.04/prod jammy main" \
            | sudo tee /etc/apt/sources.list.d/mssql-release.list
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run integration tests against Azure SQL
        env:
          SERVER: ${{ secrets.AZURE_SQL_SERVER_NAME }}.database.windows.net
          DATABASE: ${{ secrets.AZURE_SQL_DATABASE }}
          USER: ${{ secrets.AZURE_SQL_USER }}
          SQL_PASSWORD: ${{ secrets.AZURE_SQL_PASSWORD }}
        run: pytest tests/integration -q # Ejecuta solo los tests en la carpeta integration

      - name: Close firewall for this runner
        if: always()
        run: |
          az sql server firewall-rule delete \
            --resource-group ${{ secrets.AZURE_SQL_RESOURCE_GROUP }} \
            --server          ${{ secrets.AZURE_SQL_SERVER_NAME }} \
            --name            GitHubRunner
