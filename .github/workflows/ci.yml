name: CI Pipeline

# Permisos globales
permissions:
  contents: read      # para checkout
  id-token: write     # para que azure/login obtenga el token OIDC

# Disparadores del workflow
on: # Asegúrate de que 'on:' esté al inicio de la línea, sin indentación
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test: # Pruebas unitarias y dbt contra SQL Server en Docker
    runs-on: ubuntu-latest
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          ACCEPT_EULA: "Y"
          SA_PASSWORD: "DockerSql!2025"
          MSSQL_PID: "Developer"
        ports:
          - 1433:1433

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install ODBC driver and mssql-tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ca-certificates curl apt-transport-https lsb-release gnupg

          curl -fsSL https://packages.microsoft.com/keys/microsoft.asc | sudo gpg --batch --yes --dearmor -o /usr/share/keyrings/microsoft-prod.gpg
          sudo chmod a+r /usr/share/keyrings/microsoft-prod.gpg

          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft-prod.gpg] https://packages.microsoft.com/ubuntu/22.04/prod jammy main" | sudo tee /etc/apt/sources.list.d/mssql-release.list > /dev/null
          
          sudo apt-get update -y
          sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18 mssql-tools unixodbc-dev
          echo "/opt/mssql-tools/bin" >> $GITHUB_PATH

      - name: Install Python dependencies (including dbt)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt 

      - name: Wait for SQL Server to be ready
        run: |
          echo "Esperando a que SQL Server arranque..."
          for i in {1..30}; do
            sqlcmd -S localhost -U SA -P "DockerSql!2025" -Q "SELECT 1" && { echo "¡SQL Server listo!"; break; }
            echo "Intento $i fallido, reintentando en 2s..."
            sleep 2
          done
          sqlcmd -S localhost -U SA -P "DockerSql!2025" -Q "SELECT 1" || exit 1
      
      - name: Create schema and source table for dbt in Docker SQL
        env:
          SA_PASSWORD: "DockerSql!2025" 
        run: |
          echo "Creando esquema Sales y tabla Sales.Orders si no existen..."
          sqlcmd -S localhost -U SA -P "${SA_PASSWORD}" -d master -Q "IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'Sales') EXEC('CREATE SCHEMA Sales');"
          sqlcmd -S localhost -U SA -P "${SA_PASSWORD}" -d master -Q "IF OBJECT_ID('Sales.Orders', 'U') IS NULL CREATE TABLE Sales.Orders (OrderID INT PRIMARY KEY, CustomerName NVARCHAR(100), Amount DECIMAL(10,2), OrderDate DATETIME2);"
          echo "Insertando datos de muestra en Sales.Orders..."
          sqlcmd -S localhost -U SA -P "${SA_PASSWORD}" -d master -Q "DELETE FROM Sales.Orders; INSERT INTO Sales.Orders (OrderID, CustomerName, Amount, OrderDate) VALUES (1, 'Cliente CI 1', 100.50, GETDATE()), (2, 'Cliente CI 2', 75.25, GETDATE());"

      - name: Setup dbt profiles.yml for CI
        shell: bash
        env:
          DBT_SERVER: "localhost,1433"
          DBT_DATABASE: "master"
          DBT_SCHEMA: "dbo" 
          DBT_USER: "SA"
          DBT_PASSWORD: "DockerSql!2025"
          DBT_PROJECT_DIR: "vod_marketing" # El nombre de la carpeta de tu proyecto dbt
        run: |
          echo "Creando ~/.dbt/profiles.yml para el runner de CI..."
          mkdir -p ~/.dbt
          cat <<EOF > ~/.dbt/profiles.yml
          ${DBT_PROJECT_DIR}: 
            target: dev
            outputs:
              dev:
                type: sqlserver
                driver: 'ODBC Driver 18 for SQL Server'
                server: "${DBT_SERVER}"
                port: 1433
                database: "${DBT_DATABASE}"
                schema: "${DBT_SCHEMA}" 
                user: "${DBT_USER}"
                password: "${DBT_PASSWORD}"
                encrypt: False 
                trust_cert: True 
                threads: 1
          EOF
          echo "Contenido de ~/.dbt/profiles.yml:"
          cat ~/.dbt/profiles.yml

      - name: Run dbt build (models and tests)
        working-directory: ./vod_marketing # Asegúrate que esta sea la ruta a tu proyecto dbt
        run: |
          echo "Verificando conexión dbt..."
          dbt debug
          echo "Construyendo modelos y ejecutando pruebas dbt..."
          dbt build

      - name: Run Pytest unit tests (utils.db)
        env:
          SERVER: "127.0.0.1,1433"
          DATABASE: "master"
          USER: "SA"
          SQL_PASSWORD: "DockerSql!2025" 
        run: pytest tests/test_db_utils.py -q

  integration: 
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Login to Azure
        uses: azure/login@v2
        with:
          auth-type: 'SERVICE_PRINCIPAL'
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Get public IP of runner
        id: get_ip
        run: |
          echo "RUNNER_IP=$(curl -s ifconfig.me)" >> $GITHUB_ENV

      - name: Open firewall for this runner
        run: |
          az sql server firewall-rule create \
            --resource-group ${{ secrets.AZURE_SQL_RESOURCE_GROUP }} \
            --server          ${{ secrets.AZURE_SQL_SERVER_NAME }} \
            --name            GitHubRunner \
            --start-ip-address ${{ env.RUNNER_IP }} \
            --end-ip-address   ${{ env.RUNNER_IP }}

      - name: Wait for firewall rule to propagate
        run: |
          echo "Esperando 15 segundos para que la regla de firewall se propague..."
          sleep 15

      - name: Install ODBC driver & Python deps
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ca-certificates curl apt-transport-https lsb-release gnupg
          curl -fsSL https://packages.microsoft.com/keys/microsoft.asc | sudo gpg --batch --yes --dearmor -o /usr/share/keyrings/microsoft-prod.gpg
          sudo chmod a+r /usr/share/keyrings/microsoft-prod.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft-prod.gpg] https://packages.microsoft.com/ubuntu/22.04/prod jammy main" | sudo tee /etc/apt/sources.list.d/mssql-release.list > /dev/null
          sudo apt-get update -y
          sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18 unixodbc-dev
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run integration tests against Azure SQL (Pytest)
        env:
          SERVER: ${{ secrets.AZURE_SQL_SERVER_NAME }}.database.windows.net
          DATABASE: ${{ secrets.AZURE_SQL_DATABASE }}
          USER: ${{ secrets.AZURE_SQL_USER }}
          SQL_PASSWORD: ${{ secrets.AZURE_SQL_PASSWORD }}
        run: pytest tests/integration -q 

      - name: Close firewall for this runner
        if: always()
        run: |
          az sql server firewall-rule delete \
            --resource-group ${{ secrets.AZURE_SQL_RESOURCE_GROUP }} \
            --server          ${{ secrets.AZURE_SQL_SERVER_NAME }} \
            --name            GitHubRunner

